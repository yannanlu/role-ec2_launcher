---
- include: query.yml

- name: Terminate instances with profile in {{region}}
  ec2:
    state: 'absent'
    profile: "{{profile}}"
    security_token: "{{session_token|default(None)}}"
    region: "{{region}}"
    instance_ids: "{{item.instance_id}}"
  with_items: "{{ec2_info_s}}"
  loop_control:
    label: "id: {{item.instance_id}}, hostname: {{item.public_dns_name}}, private_ip: {{item.private_ip_address}}"
  when: profile != 'tower' and ec2_info_s|length > 0

- name: Terminate instances with tower in {{region}}
  ec2:
    access_key: "{{assumed_role.sts.access_key|default(None)}}"
    secret_key: "{{assumed_role.sts.secret_key|default(None)}}"
    security_token: "{{assumed_role.sts.session_token|default(None)}}"
    state: 'absent'
    region: "{{region}}"
    instance_ids: "{{item.instance_id}}"
  with_items: "{{ec2_info_s}}"
  loop_control:
    label: "id: {{item.instance_id}}, hostname: {{item.public_dns_name}}, private_ip: {{item.private_ip_address}}"
  when: profile == 'tower' and ec2_info_s|length > 0

- name: Wait for the instance to shutdown via public ips in {{region}}
  wait_for:
    host: "{{item.public_ip_address}}"
    port: 22
    state: stopped
    delay: 30
    timeout: 320
  with_items: "{{ec2_info_s}}"
  loop_control:
    label: "id: {{item.instance_id}}, hostname: {{item.public_dns_name}}, private_ip: {{item.private_ip_address}}"
  when: ec2_info_s|length > 0 and ec2_publicly_accessible

- name: Wait for the instance to shutdown via private ips in {{region}}
  wait_for:
    host: "{{item.private_ip_address}}"
    port: 22
    state: stopped
    delay: 30
    timeout: 320
  with_items: "{{ec2_info_s}}"
  loop_control:
    label: "id: {{item.instance_id}}, hostname: {{item.public_dns_name}}, private_ip: {{item.private_ip_address}}"
  when: ec2_info_s|length > 0 and not ec2_publicly_accessible

- name: Pause for a while
  pause:
    seconds: "{{pause_for_down}}"
  when: ec2_info_s|length > 0

- include: query_sg.yml

- name: Take security group down with profile in {{region}}
  ec2_group:
    name: "{{sg_name|default(key_name + '_sg')}}"
    profile: "{{profile}}"
    region: "{{region}}"
    state: 'absent'
  when: profile != 'tower' and ec2_sg_info|length > 0

- name: Take security group down with tower in {{region}}
  ec2_group:
    access_key: "{{assumed_role.sts.access_key|default(None)}}"
    secret_key: "{{assumed_role.sts.secret_key|default(None)}}"
    security_token: "{{assumed_role.sts.session_token|default(None)}}"
    name: "{{sg_name|default(key_name + '_sg')}}"
    region: "{{region}}"
    state: 'absent'
  when: profile == 'tower' and ec2_sg_info|length > 0
