---
- name: Query facts on the AMI with profile in {{region}}
  ec2_ami_facts:
    profile: "{{profile}}"
    security_token: "{{session_token|default(None)}}"
    region: "{{region}}"
    image_ids: "{{image_id}}"
  register: ami_info

- name: Set the default user for Ubuntu
  set_fact:
    default_user: ubuntu
  when: ami_info.images is defined and ami_info.images|length > 0 and ami_info.images[0].name is search('ubuntu')

- name: Set the default user for CentOS
  set_fact:
    default_user: centos
  when: ami_info.images is defined and ami_info.images|length > 0 and ami_info.images[0].name is search('CentOS')

- name: Create security group with profile in {{region}}
  ec2_group:
    name: "{{sg_name | default(key_name + '_sg')}}"
    description: "A Security group for {{service_tag}} on {{env_tag}}"
    profile: "{{profile}}"
    security_token: "{{session_token|default(None)}}"
    region: "{{region}}"
    vpc_id: "{{vpc_id}}"
    rules: "{{sg_rules}} + {{extra_sg_rules}}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
    tags:
      Name: "{{sg_name | default(key_name + '_sg')}}"
      Service: "{{service_tag | default('test_' + key_name)}}"
      Env: "{{env_tag | default('test')}}"
  when: ami_info.images|length > 0
  register: basic_sg

- include: launch_item_with_profile.yml
  with_items: "{{subnet_ids}}"
  loop_control:
    loop_var: subnet_item
  when: basic_sg.group_id is defined and ami_info.images|length > 0

- name: Wait for all instances to fullly come up
  wait_for:
    host: "{{item}}"
    port: 22
    state: started
    delay: 60
    sleep: 5
    timeout: "{{wait_for_up}}"
  with_items: "{{groups['ec2hosts']}}"

- name: Set pause time
  set_fact:
    pause_sec: "{{pause_for_up}}"

- name: Adjust pause time
  set_fact:
    pause_sec: "{{ (pause_for_up + 30)|int|abs }}"
  when: groups['ec2hosts']|length > 0 and default_user in ['ec2_user','centos'] 

- name: Pause for a while
  pause:
    seconds: "{{pause_sec}}"
  when: groups['ec2hosts']|length > 0 and pause_sec > 0
